library(shiny)
library(forecast) # para ggtsdisplay()
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de AR(1)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 1000, value = 100),
sliderInput("ar", "Parámetro AR:",
min = -0.9, max = 0.9, value = 0.1, step = 0.1)
),
mainPanel(
textOutput("simText"),
plotOutput("simPlot")
)
)
)
# Definir el servidor
server <- function(input, output) {
output$simText <- renderText({
paste("AR(1) con parámetro:", input$ar, "y", input$n, "observaciones")
})
output$simPlot <- renderPlot({
set.seed(123)
simData <- arima.sim(n = input$n, list(ar = input$ar))
ggtsdisplay(simData)
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
runApp('Shiny_AR(P).R')
runApp('Shiny_MA(q).R')
runApp('Shiny_ar1.R')
runApp('Shiny_ar1.R')
runApp('Shiny_AR(P).R')
runApp('Shiny_MA(q).R')
library(tseries)
library(forecast)
?AirPassengers
plot(AirPassengers)
plot(AirPassengers)
adf.test(AirPassengers)
PP.test(AirPassengers)
acf(AirPassengers)
library(urca)
ur.df(AirPassengers, type = "none", selectlags = "AIC")
summary(ur.df(AirPassengers, type = "none", selectlags = "AIC"))
rec = scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/recruit.dat")
soi=scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/soi.dat")
rec1<-ts(rec, start = c(1950,1), end = c(1986,9), frequency = 12)
soi1<-ts(soi, start = c(1950,1), end = c(1986,9), frequency = 12)
soi.rec<-cbind(rec1, soi1)
autoplot(soi.rec)
library(tseries)
library(vars)
library(highcharter)
library(dplyr)
library(ggfortify)
library(plotly)
data("USeconomic")
class(USeconomic)
USeconomic%>%DT::datatable()
?USeconomic
plot(USeconomic)
hchart(USeconomic)%>%hc_add_theme(hc_theme_538())
s<-autoplot(USeconomic, main = "Series", xlab = "Tiempo", ylab="Useconomic", ts.colour="blue")
ggplotly(s)
?Canada
data(Canada)
plot(Canada)
hchart(Canada) %>% hc_add_theme(hc_theme_economist()) %>% hc_title(text="Canada")
autoplot(Canada)
b<-autoplot(Canada)+
xlab("Tiempo")+
ggtitle("Series de tiempo Canada")
ggplotly(b)
rec = scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/recruit.dat")
soi=scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/soi.dat")
rec1<-ts(rec, start = c(1950,1), end = c(1986,9), frequency = 12)
soi1<-ts(soi, start = c(1950,1), end = c(1986,9), frequency = 12)
soi.rec<-cbind(rec1, soi1)
autoplot(soi.rec)
hchart(soi.rec)
autoplot(stl(soi1, s.window = "periodic"))
autoplot(stl(rec1, s.window = "periodic"))
z<-ts(rec, start = c(1950,1), end = c(1986,9), frequency = 12)
plot(z)
hchart(z)
autoplot(stl(z, s.window = "periodic"))
par(mfrow=c(3,3))
plot(z)
acf(z,lag.max = 40)
pacf(z, lag.max = 40)
plot(diff(z))
acf(diff(z), lag.max = 40)
pacf(diff(z), lag.max = 40)
plot(diff(diff(z), 12))
acf(diff(diff(z), 12), lag.max = 40)
pacf(diff(diff(z), 12),lag.max = 40)
adf.test(diff(z))
pp.test(diff(z))
adf.test(diff(diff(z), 12))
pp.test(diff(diff(z), 12))
sd(diff(z))
sd(diff(diff(z), 12))
library(forecast)
auto.arima(z)
library(TSstudio)
ts_cor(diff(diff(z),12), lag.max = 40)
par(mfrow=c(1,3))
plot(diff(diff(z), 12))
acf(diff(diff(z), 12), lag.max = 40)
pacf(diff(diff(z), 12),lag.max = 50)
modelo1<-stats::arima(z,
order=c(1,1,0),
seasonal=list(order=c(0,1,1),
period=12),fixed = c(NA,NA))
modelo1
tt <- modelo1$coef[which(modelo1$coef!=0)]/sqrt(diag(modelo1$var.coef))
1 - pt(abs(tt),(modelo1$nobs - length(modelo1$coef[which(modelo1$coef!=0)])))
BIC(modelo1)
et<-residuals(modelo1)
x1.fit <- fitted(modelo1)
par(mfrow=c(3,2))
plot(z,type="l",lty=2)
lines(x1.fit,type="l",col="red")
plot(scale(et),type="l",main="Residuales")
abline(h=2*sqrt(var(scale(et))),col="red",lty=2)
abline(h=-2*sqrt(var(scale(et))),col="red",lty=2)
acf(et)
pacf(et)
#qqPlot(scale(et))
acf(abs(et)) #Mide Estructura Heterocedástica
Box.test(et,lag=12,type="Ljung-Box")
tsdiag(modelo1, gof.lag=20)
jarque.bera.test(et)
runs.test(as.factor(sign(et)), alternative="two.sided")
autoplot(modelo1)
plot(forecast(modelo1,h=6, fan=T))
lines(fitted(modelo1), col="red")
lines(ts(rec, start = c(1950,1),frequency = 12),col="green")
forecast(modelo1,h=12, fan=T)
hchart(soi.rec)
ccfvalues<-ccf(soi,rec,20)
ccfvalues
library(TSA)
# Ajustar un modelo SARIMAX
fit <- sarimax(rec, 1, 1, 2, 0, 1, 1, 12, xreg=soi)
library(TSA)
library(TSA)
# Ajustar un modelo SARIMAX
fit <- TSA::sarimax(rec, 1, 1, 2, 0, 1, 1, 12, xreg=soi)
# Ajustar un modelo SARIMAX
fit <- sarimax(rec, 1, 1, 2, 0, 1, 1, 12, xreg=soi)
