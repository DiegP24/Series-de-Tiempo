library(shiny)
library(forecast) # para ggtsdisplay()
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de AR(1)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 1000, value = 100),
sliderInput("ar", "Parámetro AR:",
min = -0.9, max = 0.9, value = 0.1, step = 0.1)
),
mainPanel(
textOutput("simText"),
plotOutput("simPlot")
)
)
)
# Definir el servidor
server <- function(input, output) {
output$simText <- renderText({
paste("AR(1) con parámetro:", input$ar, "y", input$n, "observaciones")
})
output$simPlot <- renderPlot({
set.seed(123)
simData <- arima.sim(n = input$n, list(ar = input$ar))
ggtsdisplay(simData)
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
runApp('Shiny_AR(P).R')
runApp('Shiny_MA(q).R')
runApp('Shiny_ar1.R')
runApp('Shiny_ar1.R')
runApp('Shiny_AR(P).R')
runApp('Shiny_MA(q).R')
library(tseries)
library(forecast)
?AirPassengers
plot(AirPassengers)
plot(AirPassengers)
adf.test(AirPassengers)
PP.test(AirPassengers)
acf(AirPassengers)
library(urca)
ur.df(AirPassengers, type = "none", selectlags = "AIC")
summary(ur.df(AirPassengers, type = "none", selectlags = "AIC"))
rec = scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/recruit.dat")
soi=scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/soi.dat")
rec1<-ts(rec, start = c(1950,1), end = c(1986,9), frequency = 12)
soi1<-ts(soi, start = c(1950,1), end = c(1986,9), frequency = 12)
soi.rec<-cbind(rec1, soi1)
autoplot(soi.rec)
library(tseries)
library(vars)
library(highcharter)
library(dplyr)
library(ggfortify)
library(plotly)
data("USeconomic")
class(USeconomic)
USeconomic%>%DT::datatable()
?USeconomic
plot(USeconomic)
hchart(USeconomic)%>%hc_add_theme(hc_theme_538())
s<-autoplot(USeconomic, main = "Series", xlab = "Tiempo", ylab="Useconomic", ts.colour="blue")
ggplotly(s)
?Canada
data(Canada)
plot(Canada)
hchart(Canada) %>% hc_add_theme(hc_theme_economist()) %>% hc_title(text="Canada")
autoplot(Canada)
b<-autoplot(Canada)+
xlab("Tiempo")+
ggtitle("Series de tiempo Canada")
ggplotly(b)
rec = scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/recruit.dat")
soi=scan("https://raw.githubusercontent.com/Wilsonsr/Series-de-Tiempo/main/bases/soi.dat")
rec1<-ts(rec, start = c(1950,1), end = c(1986,9), frequency = 12)
soi1<-ts(soi, start = c(1950,1), end = c(1986,9), frequency = 12)
soi.rec<-cbind(rec1, soi1)
autoplot(soi.rec)
hchart(soi.rec)
autoplot(stl(soi1, s.window = "periodic"))
autoplot(stl(rec1, s.window = "periodic"))
z<-ts(rec, start = c(1950,1), end = c(1986,9), frequency = 12)
plot(z)
hchart(z)
autoplot(stl(z, s.window = "periodic"))
par(mfrow=c(3,3))
plot(z)
acf(z,lag.max = 40)
pacf(z, lag.max = 40)
plot(diff(z))
acf(diff(z), lag.max = 40)
pacf(diff(z), lag.max = 40)
plot(diff(diff(z), 12))
acf(diff(diff(z), 12), lag.max = 40)
pacf(diff(diff(z), 12),lag.max = 40)
adf.test(diff(z))
pp.test(diff(z))
adf.test(diff(diff(z), 12))
pp.test(diff(diff(z), 12))
sd(diff(z))
sd(diff(diff(z), 12))
library(forecast)
auto.arima(z)
library(TSstudio)
ts_cor(diff(diff(z),12), lag.max = 40)
par(mfrow=c(1,3))
plot(diff(diff(z), 12))
acf(diff(diff(z), 12), lag.max = 40)
pacf(diff(diff(z), 12),lag.max = 50)
modelo1<-stats::arima(z,
order=c(1,1,0),
seasonal=list(order=c(0,1,1),
period=12),fixed = c(NA,NA))
modelo1
tt <- modelo1$coef[which(modelo1$coef!=0)]/sqrt(diag(modelo1$var.coef))
1 - pt(abs(tt),(modelo1$nobs - length(modelo1$coef[which(modelo1$coef!=0)])))
BIC(modelo1)
et<-residuals(modelo1)
x1.fit <- fitted(modelo1)
par(mfrow=c(3,2))
plot(z,type="l",lty=2)
lines(x1.fit,type="l",col="red")
plot(scale(et),type="l",main="Residuales")
abline(h=2*sqrt(var(scale(et))),col="red",lty=2)
abline(h=-2*sqrt(var(scale(et))),col="red",lty=2)
acf(et)
pacf(et)
#qqPlot(scale(et))
acf(abs(et)) #Mide Estructura Heterocedástica
Box.test(et,lag=12,type="Ljung-Box")
tsdiag(modelo1, gof.lag=20)
jarque.bera.test(et)
runs.test(as.factor(sign(et)), alternative="two.sided")
autoplot(modelo1)
plot(forecast(modelo1,h=6, fan=T))
lines(fitted(modelo1), col="red")
lines(ts(rec, start = c(1950,1),frequency = 12),col="green")
forecast(modelo1,h=12, fan=T)
hchart(soi.rec)
ccfvalues<-ccf(soi,rec,20)
ccfvalues
library(TSA)
# Ajustar un modelo SARIMAX
fit <- sarimax(rec, 1, 1, 2, 0, 1, 1, 12, xreg=soi)
library(TSA)
library(TSA)
# Ajustar un modelo SARIMAX
fit <- TSA::sarimax(rec, 1, 1, 2, 0, 1, 1, 12, xreg=soi)
# Ajustar un modelo SARIMAX
fit <- sarimax(rec, 1, 1, 2, 0, 1, 1, 12, xreg=soi)
library(vars)
library(tseries)
library(forecast)
library(urca)
library(highcharter)
library(bvartools)
data("e6")
plot(e6)
hchart(e6)%>%hc_add_theme(hc_theme_darkunica())
adf.R<- ur.df(e6[,1], type = "trend", selectlags = "BIC")
summary(adf.R)
plot(adf.R)
adf.test(e6[,1])
pp.test(e6[,1])
adf.Dp <- ur.df(e6[,2], type = "trend", selectlags = "BIC")
summary(adf.Dp)
adf.test(e6[,2])
plot(adf.Dp)
pp.test(e6[,2])
diff.adf.R <- ur.df(diff(e6[,1]), type = "trend", selectlags = "BIC")
summary(diff.adf.R)
plot(diff.adf.R)
diff.adf.Dp <- ur.df(diff(e6[,2]), type = "trend", selectlags = "BIC")
summary(diff.adf.Dp)
plot(diff.adf.Dp)
acf(e6[,2])
adf.test(diff(e6[,1]))
adf.test(diff(e6[,2]))
var_aic <- VARselect(e6,lag.max=10, type = "both")
VARselect(e6)
var_aic
p1ct <- VAR(e6, p = 4, type = "both")
p1ct
summary(p1ct, equation = "R")
plot(p1ct, names = "R")
summary(p1ct, equation = "Dp")
plot(p1ct , name="Dp")
ser11 <- serial.test(p1ct, lags.pt = 16, type = "PT.asymptotic")
ser11$serial
norm1 <-normality.test(p1ct)
norm1$jb.mul
arch1 <- arch.test(p1ct, lags.multi = 12)
arch1$arch.mul
plot(arch1, names = "R")
plot(stability(p1ct), nc = 2)
vec <- ca.jo(e6, ecdet = "none", type = "trace",
K = 4, spec = "transitory", season = 4)
summary(vec)
class(vec)
var <- vec2var(vec, r = 1)
var
class(var)
var1<-cajorls(vec, r=1)
var1
ser11 <- serial.test(var, lags.pt = 16, type = "PT.asymptotic")
ser11$serial
norm1 <-normality.test(var)
norm1$jb.mul
arch1 <- arch.test(var, lags.multi = 12)
arch1$arch.mul
plot(arch1, names = "R")
#plot(vars::stability(var), nc = 2)
ir <- vars::irf(var, n.ahead = 20, impulse = "R", response = "Dp")
plot(ir)
ir1 <- vars::irf(var, n.ahead = 20, impulse = "Dp", response = "R")
plot(ir1)
fevd.R <- vars::fevd(var, n.ahead = 12)
plot(fevd.R)
predictions <- predict(var, n.ahead = 16, ci = 0.95)
plot(predictions)
rt=e6[,1] -3.9619*e6[,2]
plot(rt)
adf.test(rt)
pp.test(rt)
summary(ur.df(rt))
ser11 <- serial.test(p1ct, lags.pt = 16, type = "PT.asymptotic")
ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 3, type = "PT.asymptotic")
ser11 <- serial.test(p1ct, lags.pt = 2, type = "PT.asymptotic")
ser11 <- serial.test(p1ct, lags.pt = 1, type = "PT.asymptotic")
ser11 <- serial.test(p1ct, lags.pt = 4, type = "PT.asymptotic")ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 4, type = "PT.asymptotic")ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 5, type = "PT.asymptotic")ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 5, type = "PT.asymptotic")
ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 6, type = "PT.asymptotic")
ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 7, type = "PT.asymptotic")
ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 4, type = "PT.asymptotic")
ser11$serial
library(vars)
library(tseries)
library(forecast)
library(urca)
library(highcharter)
library(bvartools)
data("e6")
plot(e6)
hchart(e6)%>%hc_add_theme(hc_theme_darkunica())
adf.R<- ur.df(e6[,1], type = "trend", selectlags = "BIC")
summary(adf.R)
plot(adf.R)
adf.test(e6[,1])
pp.test(e6[,1])
adf.Dp <- ur.df(e6[,2], type = "trend", selectlags = "BIC")
summary(adf.Dp)
adf.test(e6[,2])
plot(adf.Dp)
pp.test(e6[,2])
diff.adf.R <- ur.df(diff(e6[,1]), type = "trend", selectlags = "BIC")
summary(diff.adf.R)
plot(diff.adf.R)
diff.adf.Dp <- ur.df(diff(e6[,2]), type = "trend", selectlags = "BIC")
summary(diff.adf.Dp)
plot(diff.adf.Dp)
acf(e6[,2])
adf.test(diff(e6[,1]))
adf.test(diff(e6[,2]))
var_aic <- VARselect(e6,lag.max=10, type = "both")
VARselect(e6)
var_aic
p1ct <- VAR(e6, p = 4, type = "both")
p1ct
summary(p1ct, equation = "R")
plot(p1ct, names = "R")
summary(p1ct, equation = "Dp")
plot(p1ct , name="Dp")
ser11 <- serial.test(p1ct, lags.pt = 4, type = "PT.asymptotic")
ser11$serial
norm1 <-normality.test(p1ct)
norm1$jb.mul
arch1 <- arch.test(p1ct, lags.multi = 12)
arch1$arch.mul
plot(arch1, names = "R")
plot(stability(p1ct), nc = 2)
vec <- ca.jo(e6, ecdet = "none", type = "trace",
K = 4, spec = "transitory", season = 4)
summary(vec)
class(vec)
var <- vec2var(vec, r = 1)
var
class(var)
var1<-cajorls(vec, r=1)
var1
ser11 <- serial.test(var, lags.pt = 16, type = "PT.asymptotic")
ser11$serial
norm1 <-normality.test(var)
norm1$jb.mul
arch1 <- arch.test(var, lags.multi = 12)
arch1$arch.mul
plot(arch1, names = "R")
#plot(vars::stability(var), nc = 2)
ir <- vars::irf(var, n.ahead = 20, impulse = "R", response = "Dp")
plot(ir)
ir1 <- vars::irf(var, n.ahead = 20, impulse = "Dp", response = "R")
plot(ir1)
fevd.R <- vars::fevd(var, n.ahead = 12)
plot(fevd.R)
predictions <- predict(var, n.ahead = 16, ci = 0.95)
plot(predictions)
rt=e6[,1] -3.9619*e6[,2]
plot(rt)
adf.test(rt)
pp.test(rt)
summary(ur.df(rt))
ser11 <- serial.test(p1ct, lags.pt = 5, type = "PT.asymptotic")
ser11$serial
ser11 <- serial.test(p1ct, lags.pt = 6, type = "PT.asymptotic")
ser11$serial
sjf.vecm <- ca.jo(sjf, ecdet = "none", type="eigen", K=2,
spec="longrun", season=4)
library(tseries)
library(readxl)
library(readxl)
ipvn <- read_excel("C:/Users/wsand/Desktop/ipvn.xlsx",
col_types = c("date", "numeric"))
View(ipvn)
ipvn <- read_excel("C:/Users/wsand/Desktop/ipvn.xlsx",
+     col_types = c("date", "numeric"))
ipvn <- read_excel("C:/Users/wsand/Desktop/ipvn.xlsx",
col_types = c("date", "numeric"))
head(ipvn)
z1= ts(ipvn$Bogotá)
z1= ts(ipvn$Bogotá , start = c(2004, 1) ,end = c(2022,12),frequency = 12  )
z1
class(z1)
z1= ts(ipvn$Bogotá , start = c(2004, 1) ,end = c(2022,12),frequency = 12  )
z1
class(z1)
#####
plot(z1)
########
library(TSstudio)
ts_plot(z1)
ts_plot(z1, slider = T)
######
ts_decompose(z1)
#####
ts_seasonal(z1)
#####
ts_seasonal(z1,type = "all" )
####
ts_heatmap(z1)
######
library(highcharter)
hchart(z1)
autoplot(z1)
library(ggplot2)
autoplot(z1)
library(shiny); runApp('Shiny_AR(P).R')
fluidPage(
titlePanel("Changing the values of inputs from the server"),
fluidRow(
column(3, wellPanel(
h4("These inputs control the other inputs on the page"),
textInput("control_label",
"This controls some of the labels:",
"LABEL TEXT"),
sliderInput("control_num",
"This controls values:",
min = 1, max = 20, value = 15)
)),
column(3, wellPanel(
textInput("inText",  "Text input:", value = "start text"),
numericInput("inNumber", "Number input:",
min = 1, max = 20, value = 5, step = 0.5),
numericInput("inNumber2", "Number input 2:",
min = 1, max = 20, value = 5, step = 0.5),
sliderInput("inSlider", "Slider input:",
min = 1, max = 20, value = 15),
sliderInput("inSlider2", "Slider input 2:",
min = 1, max = 20, value = c(5, 15)),
sliderInput("inSlider3", "Slider input 3:",
min = 1, max = 20, value = c(5, 15)),
dateInput("inDate", "Date input:"),
dateRangeInput("inDateRange", "Date range input:")
)),
column(3,
wellPanel(
checkboxInput("inCheckbox", "Checkbox input",
value = FALSE),
checkboxGroupInput("inCheckboxGroup",
"Checkbox group input:",
c("label 1" = "option1",
"label 2" = "option2")),
radioButtons("inRadio", "Radio buttons:",
c("label 1" = "option1",
"label 2" = "option2")),
selectInput("inSelect", "Select input:",
c("label 1" = "option1",
"label 2" = "option2")),
selectInput("inSelect2", "Select input 2:",
multiple = TRUE,
c("label 1" = "option1",
"label 2" = "option2"))
),
tabsetPanel(id = "inTabset",
tabPanel("panel1", h2("This is the first panel.")),
tabPanel("panel2", h2("This is the second panel."))
)
)
)
)
fluidPage(
titlePanel("Changing the values of inputs from the server"),
fluidRow(
column(3, wellPanel(
h4("These inputs control the other inputs on the page"),
textInput("control_label",
"This controls some of the labels:",
"LABEL TEXT"),
sliderInput("control_num",
"This controls values:",
min = 1, max = 20, value = 15)
)),
column(3, wellPanel(
textInput("inText",  "Text input:", value = "start text"),
numericInput("inNumber", "Number input:",
min = 1, max = 20, value = 5, step = 0.5),
numericInput("inNumber2", "Number input 2:",
min = 1, max = 20, value = 5, step = 0.5),
sliderInput("inSlider", "Slider input:",
min = 1, max = 20, value = 15),
sliderInput("inSlider2", "Slider input 2:",
min = 1, max = 20, value = c(5, 15)),
sliderInput("inSlider3", "Slider input 3:",
min = 1, max = 20, value = c(5, 15)),
dateInput("inDate", "Date input:"),
dateRangeInput("inDateRange", "Date range input:")
)),
column(3,
wellPanel(
checkboxInput("inCheckbox", "Checkbox input",
value = FALSE),
checkboxGroupInput("inCheckboxGroup",
"Checkbox group input:",
c("label 1" = "option1",
"label 2" = "option2")),
radioButtons("inRadio", "Radio buttons:",
c("label 1" = "option1",
"label 2" = "option2")),
selectInput("inSelect", "Select input:",
c("label 1" = "option1",
"label 2" = "option2")),
selectInput("inSelect2", "Select input 2:",
multiple = TRUE,
c("label 1" = "option1",
"label 2" = "option2"))
),
tabsetPanel(id = "inTabset",
tabPanel("panel1", h2("This is the first panel.")),
tabPanel("panel2", h2("This is the second panel."))
)
)
)
)
